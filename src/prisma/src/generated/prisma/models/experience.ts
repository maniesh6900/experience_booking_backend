
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `experience` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model experience
 * 
 */
export type experienceModel = runtime.Types.Result.DefaultSelection<Prisma.$experiencePayload>

export type AggregateExperience = {
  _count: ExperienceCountAggregateOutputType | null
  _avg: ExperienceAvgAggregateOutputType | null
  _sum: ExperienceSumAggregateOutputType | null
  _min: ExperienceMinAggregateOutputType | null
  _max: ExperienceMaxAggregateOutputType | null
}

export type ExperienceAvgAggregateOutputType = {
  price: number | null
  duration: number | null
}

export type ExperienceSumAggregateOutputType = {
  price: number | null
  duration: number | null
}

export type ExperienceMinAggregateOutputType = {
  id: string | null
  img_url: string | null
  title: string | null
  description: string | null
  price: number | null
  duration: number | null
}

export type ExperienceMaxAggregateOutputType = {
  id: string | null
  img_url: string | null
  title: string | null
  description: string | null
  price: number | null
  duration: number | null
}

export type ExperienceCountAggregateOutputType = {
  id: number
  img_url: number
  title: number
  description: number
  price: number
  duration: number
  _all: number
}


export type ExperienceAvgAggregateInputType = {
  price?: true
  duration?: true
}

export type ExperienceSumAggregateInputType = {
  price?: true
  duration?: true
}

export type ExperienceMinAggregateInputType = {
  id?: true
  img_url?: true
  title?: true
  description?: true
  price?: true
  duration?: true
}

export type ExperienceMaxAggregateInputType = {
  id?: true
  img_url?: true
  title?: true
  description?: true
  price?: true
  duration?: true
}

export type ExperienceCountAggregateInputType = {
  id?: true
  img_url?: true
  title?: true
  description?: true
  price?: true
  duration?: true
  _all?: true
}

export type ExperienceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which experience to aggregate.
   */
  where?: Prisma.experienceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of experiences to fetch.
   */
  orderBy?: Prisma.experienceOrderByWithRelationInput | Prisma.experienceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.experienceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` experiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` experiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned experiences
  **/
  _count?: true | ExperienceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ExperienceAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ExperienceSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExperienceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExperienceMaxAggregateInputType
}

export type GetExperienceAggregateType<T extends ExperienceAggregateArgs> = {
      [P in keyof T & keyof AggregateExperience]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExperience[P]>
    : Prisma.GetScalarType<T[P], AggregateExperience[P]>
}




export type experienceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.experienceWhereInput
  orderBy?: Prisma.experienceOrderByWithAggregationInput | Prisma.experienceOrderByWithAggregationInput[]
  by: Prisma.ExperienceScalarFieldEnum[] | Prisma.ExperienceScalarFieldEnum
  having?: Prisma.experienceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExperienceCountAggregateInputType | true
  _avg?: ExperienceAvgAggregateInputType
  _sum?: ExperienceSumAggregateInputType
  _min?: ExperienceMinAggregateInputType
  _max?: ExperienceMaxAggregateInputType
}

export type ExperienceGroupByOutputType = {
  id: string
  img_url: string
  title: string
  description: string
  price: number
  duration: number
  _count: ExperienceCountAggregateOutputType | null
  _avg: ExperienceAvgAggregateOutputType | null
  _sum: ExperienceSumAggregateOutputType | null
  _min: ExperienceMinAggregateOutputType | null
  _max: ExperienceMaxAggregateOutputType | null
}

type GetExperienceGroupByPayload<T extends experienceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExperienceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExperienceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExperienceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExperienceGroupByOutputType[P]>
      }
    >
  >



export type experienceWhereInput = {
  AND?: Prisma.experienceWhereInput | Prisma.experienceWhereInput[]
  OR?: Prisma.experienceWhereInput[]
  NOT?: Prisma.experienceWhereInput | Prisma.experienceWhereInput[]
  id?: Prisma.StringFilter<"experience"> | string
  img_url?: Prisma.StringFilter<"experience"> | string
  title?: Prisma.StringFilter<"experience"> | string
  description?: Prisma.StringFilter<"experience"> | string
  price?: Prisma.FloatFilter<"experience"> | number
  duration?: Prisma.IntFilter<"experience"> | number
  booking?: Prisma.BookingListRelationFilter
}

export type experienceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  img_url?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  booking?: Prisma.bookingOrderByRelationAggregateInput
}

export type experienceWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.experienceWhereInput | Prisma.experienceWhereInput[]
  OR?: Prisma.experienceWhereInput[]
  NOT?: Prisma.experienceWhereInput | Prisma.experienceWhereInput[]
  img_url?: Prisma.StringFilter<"experience"> | string
  title?: Prisma.StringFilter<"experience"> | string
  description?: Prisma.StringFilter<"experience"> | string
  price?: Prisma.FloatFilter<"experience"> | number
  duration?: Prisma.IntFilter<"experience"> | number
  booking?: Prisma.BookingListRelationFilter
}, "id">

export type experienceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  img_url?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  _count?: Prisma.experienceCountOrderByAggregateInput
  _avg?: Prisma.experienceAvgOrderByAggregateInput
  _max?: Prisma.experienceMaxOrderByAggregateInput
  _min?: Prisma.experienceMinOrderByAggregateInput
  _sum?: Prisma.experienceSumOrderByAggregateInput
}

export type experienceScalarWhereWithAggregatesInput = {
  AND?: Prisma.experienceScalarWhereWithAggregatesInput | Prisma.experienceScalarWhereWithAggregatesInput[]
  OR?: Prisma.experienceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.experienceScalarWhereWithAggregatesInput | Prisma.experienceScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"experience"> | string
  img_url?: Prisma.StringWithAggregatesFilter<"experience"> | string
  title?: Prisma.StringWithAggregatesFilter<"experience"> | string
  description?: Prisma.StringWithAggregatesFilter<"experience"> | string
  price?: Prisma.FloatWithAggregatesFilter<"experience"> | number
  duration?: Prisma.IntWithAggregatesFilter<"experience"> | number
}

export type experienceCreateInput = {
  id?: string
  img_url: string
  title: string
  description: string
  price: number
  duration: number
  booking?: Prisma.bookingCreateNestedManyWithoutExperienceInput
}

export type experienceUncheckedCreateInput = {
  id?: string
  img_url: string
  title: string
  description: string
  price: number
  duration: number
  booking?: Prisma.bookingUncheckedCreateNestedManyWithoutExperienceInput
}

export type experienceUpdateInput = {
  img_url?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  booking?: Prisma.bookingUpdateManyWithoutExperienceNestedInput
}

export type experienceUncheckedUpdateInput = {
  img_url?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  booking?: Prisma.bookingUncheckedUpdateManyWithoutExperienceNestedInput
}

export type experienceCreateManyInput = {
  id?: string
  img_url: string
  title: string
  description: string
  price: number
  duration: number
}

export type experienceUpdateManyMutationInput = {
  img_url?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
}

export type experienceUncheckedUpdateManyInput = {
  img_url?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ExperienceScalarRelationFilter = {
  is?: Prisma.experienceWhereInput
  isNot?: Prisma.experienceWhereInput
}

export type experienceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  img_url?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
}

export type experienceAvgOrderByAggregateInput = {
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
}

export type experienceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  img_url?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
}

export type experienceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  img_url?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
}

export type experienceSumOrderByAggregateInput = {
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
}

export type experienceCreateNestedOneWithoutBookingInput = {
  create?: Prisma.XOR<Prisma.experienceCreateWithoutBookingInput, Prisma.experienceUncheckedCreateWithoutBookingInput>
  connectOrCreate?: Prisma.experienceCreateOrConnectWithoutBookingInput
  connect?: Prisma.experienceWhereUniqueInput
}

export type experienceUpdateOneRequiredWithoutBookingNestedInput = {
  create?: Prisma.XOR<Prisma.experienceCreateWithoutBookingInput, Prisma.experienceUncheckedCreateWithoutBookingInput>
  connectOrCreate?: Prisma.experienceCreateOrConnectWithoutBookingInput
  upsert?: Prisma.experienceUpsertWithoutBookingInput
  connect?: Prisma.experienceWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.experienceUpdateToOneWithWhereWithoutBookingInput, Prisma.experienceUpdateWithoutBookingInput>, Prisma.experienceUncheckedUpdateWithoutBookingInput>
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type experienceCreateWithoutBookingInput = {
  id?: string
  img_url: string
  title: string
  description: string
  price: number
  duration: number
}

export type experienceUncheckedCreateWithoutBookingInput = {
  id?: string
  img_url: string
  title: string
  description: string
  price: number
  duration: number
}

export type experienceCreateOrConnectWithoutBookingInput = {
  where: Prisma.experienceWhereUniqueInput
  create: Prisma.XOR<Prisma.experienceCreateWithoutBookingInput, Prisma.experienceUncheckedCreateWithoutBookingInput>
}

export type experienceUpsertWithoutBookingInput = {
  update: Prisma.XOR<Prisma.experienceUpdateWithoutBookingInput, Prisma.experienceUncheckedUpdateWithoutBookingInput>
  create: Prisma.XOR<Prisma.experienceCreateWithoutBookingInput, Prisma.experienceUncheckedCreateWithoutBookingInput>
  where?: Prisma.experienceWhereInput
}

export type experienceUpdateToOneWithWhereWithoutBookingInput = {
  where?: Prisma.experienceWhereInput
  data: Prisma.XOR<Prisma.experienceUpdateWithoutBookingInput, Prisma.experienceUncheckedUpdateWithoutBookingInput>
}

export type experienceUpdateWithoutBookingInput = {
  img_url?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
}

export type experienceUncheckedUpdateWithoutBookingInput = {
  img_url?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type ExperienceCountOutputType
 */

export type ExperienceCountOutputType = {
  booking: number
}

export type ExperienceCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  booking?: boolean | ExperienceCountOutputTypeCountBookingArgs
}

/**
 * ExperienceCountOutputType without action
 */
export type ExperienceCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceCountOutputType
   */
  select?: Prisma.ExperienceCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ExperienceCountOutputType without action
 */
export type ExperienceCountOutputTypeCountBookingArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.bookingWhereInput
}


export type experienceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  img_url?: boolean
  title?: boolean
  description?: boolean
  price?: boolean
  duration?: boolean
  booking?: boolean | Prisma.experience$bookingArgs<ExtArgs>
  _count?: boolean | Prisma.ExperienceCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["experience"]>



export type experienceSelectScalar = {
  id?: boolean
  img_url?: boolean
  title?: boolean
  description?: boolean
  price?: boolean
  duration?: boolean
}

export type experienceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "img_url" | "title" | "description" | "price" | "duration", ExtArgs["result"]["experience"]>
export type experienceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  booking?: boolean | Prisma.experience$bookingArgs<ExtArgs>
  _count?: boolean | Prisma.ExperienceCountOutputTypeDefaultArgs<ExtArgs>
}

export type $experiencePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "experience"
  objects: {
    booking: Prisma.$bookingPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    img_url: string
    title: string
    description: string
    price: number
    duration: number
  }, ExtArgs["result"]["experience"]>
  composites: {}
}

export type experienceGetPayload<S extends boolean | null | undefined | experienceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$experiencePayload, S>

export type experienceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<experienceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExperienceCountAggregateInputType | true
  }

export interface experienceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['experience'], meta: { name: 'experience' } }
  /**
   * Find zero or one Experience that matches the filter.
   * @param {experienceFindUniqueArgs} args - Arguments to find a Experience
   * @example
   * // Get one Experience
   * const experience = await prisma.experience.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends experienceFindUniqueArgs>(args: Prisma.SelectSubset<T, experienceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__experienceClient<runtime.Types.Result.GetResult<Prisma.$experiencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Experience that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {experienceFindUniqueOrThrowArgs} args - Arguments to find a Experience
   * @example
   * // Get one Experience
   * const experience = await prisma.experience.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends experienceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, experienceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__experienceClient<runtime.Types.Result.GetResult<Prisma.$experiencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Experience that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {experienceFindFirstArgs} args - Arguments to find a Experience
   * @example
   * // Get one Experience
   * const experience = await prisma.experience.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends experienceFindFirstArgs>(args?: Prisma.SelectSubset<T, experienceFindFirstArgs<ExtArgs>>): Prisma.Prisma__experienceClient<runtime.Types.Result.GetResult<Prisma.$experiencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Experience that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {experienceFindFirstOrThrowArgs} args - Arguments to find a Experience
   * @example
   * // Get one Experience
   * const experience = await prisma.experience.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends experienceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, experienceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__experienceClient<runtime.Types.Result.GetResult<Prisma.$experiencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Experiences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {experienceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Experiences
   * const experiences = await prisma.experience.findMany()
   * 
   * // Get first 10 Experiences
   * const experiences = await prisma.experience.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const experienceWithIdOnly = await prisma.experience.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends experienceFindManyArgs>(args?: Prisma.SelectSubset<T, experienceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$experiencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Experience.
   * @param {experienceCreateArgs} args - Arguments to create a Experience.
   * @example
   * // Create one Experience
   * const Experience = await prisma.experience.create({
   *   data: {
   *     // ... data to create a Experience
   *   }
   * })
   * 
   */
  create<T extends experienceCreateArgs>(args: Prisma.SelectSubset<T, experienceCreateArgs<ExtArgs>>): Prisma.Prisma__experienceClient<runtime.Types.Result.GetResult<Prisma.$experiencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Experiences.
   * @param {experienceCreateManyArgs} args - Arguments to create many Experiences.
   * @example
   * // Create many Experiences
   * const experience = await prisma.experience.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends experienceCreateManyArgs>(args?: Prisma.SelectSubset<T, experienceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Experience.
   * @param {experienceDeleteArgs} args - Arguments to delete one Experience.
   * @example
   * // Delete one Experience
   * const Experience = await prisma.experience.delete({
   *   where: {
   *     // ... filter to delete one Experience
   *   }
   * })
   * 
   */
  delete<T extends experienceDeleteArgs>(args: Prisma.SelectSubset<T, experienceDeleteArgs<ExtArgs>>): Prisma.Prisma__experienceClient<runtime.Types.Result.GetResult<Prisma.$experiencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Experience.
   * @param {experienceUpdateArgs} args - Arguments to update one Experience.
   * @example
   * // Update one Experience
   * const experience = await prisma.experience.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends experienceUpdateArgs>(args: Prisma.SelectSubset<T, experienceUpdateArgs<ExtArgs>>): Prisma.Prisma__experienceClient<runtime.Types.Result.GetResult<Prisma.$experiencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Experiences.
   * @param {experienceDeleteManyArgs} args - Arguments to filter Experiences to delete.
   * @example
   * // Delete a few Experiences
   * const { count } = await prisma.experience.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends experienceDeleteManyArgs>(args?: Prisma.SelectSubset<T, experienceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Experiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {experienceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Experiences
   * const experience = await prisma.experience.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends experienceUpdateManyArgs>(args: Prisma.SelectSubset<T, experienceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Experience.
   * @param {experienceUpsertArgs} args - Arguments to update or create a Experience.
   * @example
   * // Update or create a Experience
   * const experience = await prisma.experience.upsert({
   *   create: {
   *     // ... data to create a Experience
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Experience we want to update
   *   }
   * })
   */
  upsert<T extends experienceUpsertArgs>(args: Prisma.SelectSubset<T, experienceUpsertArgs<ExtArgs>>): Prisma.Prisma__experienceClient<runtime.Types.Result.GetResult<Prisma.$experiencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Experiences that matches the filter.
   * @param {experienceFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const experience = await prisma.experience.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.experienceFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Experience.
   * @param {experienceAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const experience = await prisma.experience.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.experienceAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Experiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {experienceCountArgs} args - Arguments to filter Experiences to count.
   * @example
   * // Count the number of Experiences
   * const count = await prisma.experience.count({
   *   where: {
   *     // ... the filter for the Experiences we want to count
   *   }
   * })
  **/
  count<T extends experienceCountArgs>(
    args?: Prisma.Subset<T, experienceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExperienceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Experience.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExperienceAggregateArgs>(args: Prisma.Subset<T, ExperienceAggregateArgs>): Prisma.PrismaPromise<GetExperienceAggregateType<T>>

  /**
   * Group by Experience.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {experienceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends experienceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: experienceGroupByArgs['orderBy'] }
      : { orderBy?: experienceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, experienceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExperienceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the experience model
 */
readonly fields: experienceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for experience.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__experienceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  booking<T extends Prisma.experience$bookingArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.experience$bookingArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$bookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the experience model
 */
export interface experienceFieldRefs {
  readonly id: Prisma.FieldRef<"experience", 'String'>
  readonly img_url: Prisma.FieldRef<"experience", 'String'>
  readonly title: Prisma.FieldRef<"experience", 'String'>
  readonly description: Prisma.FieldRef<"experience", 'String'>
  readonly price: Prisma.FieldRef<"experience", 'Float'>
  readonly duration: Prisma.FieldRef<"experience", 'Int'>
}
    

// Custom InputTypes
/**
 * experience findUnique
 */
export type experienceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the experience
   */
  select?: Prisma.experienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the experience
   */
  omit?: Prisma.experienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.experienceInclude<ExtArgs> | null
  /**
   * Filter, which experience to fetch.
   */
  where: Prisma.experienceWhereUniqueInput
}

/**
 * experience findUniqueOrThrow
 */
export type experienceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the experience
   */
  select?: Prisma.experienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the experience
   */
  omit?: Prisma.experienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.experienceInclude<ExtArgs> | null
  /**
   * Filter, which experience to fetch.
   */
  where: Prisma.experienceWhereUniqueInput
}

/**
 * experience findFirst
 */
export type experienceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the experience
   */
  select?: Prisma.experienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the experience
   */
  omit?: Prisma.experienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.experienceInclude<ExtArgs> | null
  /**
   * Filter, which experience to fetch.
   */
  where?: Prisma.experienceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of experiences to fetch.
   */
  orderBy?: Prisma.experienceOrderByWithRelationInput | Prisma.experienceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for experiences.
   */
  cursor?: Prisma.experienceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` experiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` experiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of experiences.
   */
  distinct?: Prisma.ExperienceScalarFieldEnum | Prisma.ExperienceScalarFieldEnum[]
}

/**
 * experience findFirstOrThrow
 */
export type experienceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the experience
   */
  select?: Prisma.experienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the experience
   */
  omit?: Prisma.experienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.experienceInclude<ExtArgs> | null
  /**
   * Filter, which experience to fetch.
   */
  where?: Prisma.experienceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of experiences to fetch.
   */
  orderBy?: Prisma.experienceOrderByWithRelationInput | Prisma.experienceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for experiences.
   */
  cursor?: Prisma.experienceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` experiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` experiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of experiences.
   */
  distinct?: Prisma.ExperienceScalarFieldEnum | Prisma.ExperienceScalarFieldEnum[]
}

/**
 * experience findMany
 */
export type experienceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the experience
   */
  select?: Prisma.experienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the experience
   */
  omit?: Prisma.experienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.experienceInclude<ExtArgs> | null
  /**
   * Filter, which experiences to fetch.
   */
  where?: Prisma.experienceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of experiences to fetch.
   */
  orderBy?: Prisma.experienceOrderByWithRelationInput | Prisma.experienceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing experiences.
   */
  cursor?: Prisma.experienceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` experiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` experiences.
   */
  skip?: number
  distinct?: Prisma.ExperienceScalarFieldEnum | Prisma.ExperienceScalarFieldEnum[]
}

/**
 * experience create
 */
export type experienceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the experience
   */
  select?: Prisma.experienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the experience
   */
  omit?: Prisma.experienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.experienceInclude<ExtArgs> | null
  /**
   * The data needed to create a experience.
   */
  data: Prisma.XOR<Prisma.experienceCreateInput, Prisma.experienceUncheckedCreateInput>
}

/**
 * experience createMany
 */
export type experienceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many experiences.
   */
  data: Prisma.experienceCreateManyInput | Prisma.experienceCreateManyInput[]
}

/**
 * experience update
 */
export type experienceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the experience
   */
  select?: Prisma.experienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the experience
   */
  omit?: Prisma.experienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.experienceInclude<ExtArgs> | null
  /**
   * The data needed to update a experience.
   */
  data: Prisma.XOR<Prisma.experienceUpdateInput, Prisma.experienceUncheckedUpdateInput>
  /**
   * Choose, which experience to update.
   */
  where: Prisma.experienceWhereUniqueInput
}

/**
 * experience updateMany
 */
export type experienceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update experiences.
   */
  data: Prisma.XOR<Prisma.experienceUpdateManyMutationInput, Prisma.experienceUncheckedUpdateManyInput>
  /**
   * Filter which experiences to update
   */
  where?: Prisma.experienceWhereInput
  /**
   * Limit how many experiences to update.
   */
  limit?: number
}

/**
 * experience upsert
 */
export type experienceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the experience
   */
  select?: Prisma.experienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the experience
   */
  omit?: Prisma.experienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.experienceInclude<ExtArgs> | null
  /**
   * The filter to search for the experience to update in case it exists.
   */
  where: Prisma.experienceWhereUniqueInput
  /**
   * In case the experience found by the `where` argument doesn't exist, create a new experience with this data.
   */
  create: Prisma.XOR<Prisma.experienceCreateInput, Prisma.experienceUncheckedCreateInput>
  /**
   * In case the experience was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.experienceUpdateInput, Prisma.experienceUncheckedUpdateInput>
}

/**
 * experience delete
 */
export type experienceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the experience
   */
  select?: Prisma.experienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the experience
   */
  omit?: Prisma.experienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.experienceInclude<ExtArgs> | null
  /**
   * Filter which experience to delete.
   */
  where: Prisma.experienceWhereUniqueInput
}

/**
 * experience deleteMany
 */
export type experienceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which experiences to delete
   */
  where?: Prisma.experienceWhereInput
  /**
   * Limit how many experiences to delete.
   */
  limit?: number
}

/**
 * experience findRaw
 */
export type experienceFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * experience aggregateRaw
 */
export type experienceAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * experience.booking
 */
export type experience$bookingArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the booking
   */
  select?: Prisma.bookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the booking
   */
  omit?: Prisma.bookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookingInclude<ExtArgs> | null
  where?: Prisma.bookingWhereInput
  orderBy?: Prisma.bookingOrderByWithRelationInput | Prisma.bookingOrderByWithRelationInput[]
  cursor?: Prisma.bookingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BookingScalarFieldEnum | Prisma.BookingScalarFieldEnum[]
}

/**
 * experience without action
 */
export type experienceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the experience
   */
  select?: Prisma.experienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the experience
   */
  omit?: Prisma.experienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.experienceInclude<ExtArgs> | null
}
