
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `booking` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model booking
 * 
 */
export type bookingModel = runtime.Types.Result.DefaultSelection<Prisma.$bookingPayload>

export type AggregateBooking = {
  _count: BookingCountAggregateOutputType | null
  _min: BookingMinAggregateOutputType | null
  _max: BookingMaxAggregateOutputType | null
}

export type BookingMinAggregateOutputType = {
  id: string | null
  fullName: string | null
  email: string | null
  experienceId: string | null
  date: Date | null
  timeSlot: string | null
  totalPrice: string | null
  promoCode: $Enums.PromoCode | null
}

export type BookingMaxAggregateOutputType = {
  id: string | null
  fullName: string | null
  email: string | null
  experienceId: string | null
  date: Date | null
  timeSlot: string | null
  totalPrice: string | null
  promoCode: $Enums.PromoCode | null
}

export type BookingCountAggregateOutputType = {
  id: number
  fullName: number
  email: number
  experienceId: number
  date: number
  timeSlot: number
  totalPrice: number
  promoCode: number
  _all: number
}


export type BookingMinAggregateInputType = {
  id?: true
  fullName?: true
  email?: true
  experienceId?: true
  date?: true
  timeSlot?: true
  totalPrice?: true
  promoCode?: true
}

export type BookingMaxAggregateInputType = {
  id?: true
  fullName?: true
  email?: true
  experienceId?: true
  date?: true
  timeSlot?: true
  totalPrice?: true
  promoCode?: true
}

export type BookingCountAggregateInputType = {
  id?: true
  fullName?: true
  email?: true
  experienceId?: true
  date?: true
  timeSlot?: true
  totalPrice?: true
  promoCode?: true
  _all?: true
}

export type BookingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which booking to aggregate.
   */
  where?: Prisma.bookingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of bookings to fetch.
   */
  orderBy?: Prisma.bookingOrderByWithRelationInput | Prisma.bookingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.bookingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` bookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` bookings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned bookings
  **/
  _count?: true | BookingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BookingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BookingMaxAggregateInputType
}

export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
      [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBooking[P]>
    : Prisma.GetScalarType<T[P], AggregateBooking[P]>
}




export type bookingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.bookingWhereInput
  orderBy?: Prisma.bookingOrderByWithAggregationInput | Prisma.bookingOrderByWithAggregationInput[]
  by: Prisma.BookingScalarFieldEnum[] | Prisma.BookingScalarFieldEnum
  having?: Prisma.bookingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BookingCountAggregateInputType | true
  _min?: BookingMinAggregateInputType
  _max?: BookingMaxAggregateInputType
}

export type BookingGroupByOutputType = {
  id: string
  fullName: string
  email: string
  experienceId: string
  date: Date
  timeSlot: string
  totalPrice: string
  promoCode: $Enums.PromoCode
  _count: BookingCountAggregateOutputType | null
  _min: BookingMinAggregateOutputType | null
  _max: BookingMaxAggregateOutputType | null
}

type GetBookingGroupByPayload<T extends bookingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BookingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BookingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BookingGroupByOutputType[P]>
      }
    >
  >



export type bookingWhereInput = {
  AND?: Prisma.bookingWhereInput | Prisma.bookingWhereInput[]
  OR?: Prisma.bookingWhereInput[]
  NOT?: Prisma.bookingWhereInput | Prisma.bookingWhereInput[]
  id?: Prisma.StringFilter<"booking"> | string
  fullName?: Prisma.StringFilter<"booking"> | string
  email?: Prisma.StringFilter<"booking"> | string
  experienceId?: Prisma.StringFilter<"booking"> | string
  date?: Prisma.DateTimeFilter<"booking"> | Date | string
  timeSlot?: Prisma.StringFilter<"booking"> | string
  totalPrice?: Prisma.StringFilter<"booking"> | string
  promoCode?: Prisma.EnumPromoCodeFilter<"booking"> | $Enums.PromoCode
  experience?: Prisma.XOR<Prisma.ExperienceScalarRelationFilter, Prisma.experienceWhereInput>
}

export type bookingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  experienceId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  timeSlot?: Prisma.SortOrder
  totalPrice?: Prisma.SortOrder
  promoCode?: Prisma.SortOrder
  experience?: Prisma.experienceOrderByWithRelationInput
}

export type bookingWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.bookingWhereInput | Prisma.bookingWhereInput[]
  OR?: Prisma.bookingWhereInput[]
  NOT?: Prisma.bookingWhereInput | Prisma.bookingWhereInput[]
  fullName?: Prisma.StringFilter<"booking"> | string
  email?: Prisma.StringFilter<"booking"> | string
  experienceId?: Prisma.StringFilter<"booking"> | string
  date?: Prisma.DateTimeFilter<"booking"> | Date | string
  timeSlot?: Prisma.StringFilter<"booking"> | string
  totalPrice?: Prisma.StringFilter<"booking"> | string
  promoCode?: Prisma.EnumPromoCodeFilter<"booking"> | $Enums.PromoCode
  experience?: Prisma.XOR<Prisma.ExperienceScalarRelationFilter, Prisma.experienceWhereInput>
}, "id">

export type bookingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  experienceId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  timeSlot?: Prisma.SortOrder
  totalPrice?: Prisma.SortOrder
  promoCode?: Prisma.SortOrder
  _count?: Prisma.bookingCountOrderByAggregateInput
  _max?: Prisma.bookingMaxOrderByAggregateInput
  _min?: Prisma.bookingMinOrderByAggregateInput
}

export type bookingScalarWhereWithAggregatesInput = {
  AND?: Prisma.bookingScalarWhereWithAggregatesInput | Prisma.bookingScalarWhereWithAggregatesInput[]
  OR?: Prisma.bookingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.bookingScalarWhereWithAggregatesInput | Prisma.bookingScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"booking"> | string
  fullName?: Prisma.StringWithAggregatesFilter<"booking"> | string
  email?: Prisma.StringWithAggregatesFilter<"booking"> | string
  experienceId?: Prisma.StringWithAggregatesFilter<"booking"> | string
  date?: Prisma.DateTimeWithAggregatesFilter<"booking"> | Date | string
  timeSlot?: Prisma.StringWithAggregatesFilter<"booking"> | string
  totalPrice?: Prisma.StringWithAggregatesFilter<"booking"> | string
  promoCode?: Prisma.EnumPromoCodeWithAggregatesFilter<"booking"> | $Enums.PromoCode
}

export type bookingCreateInput = {
  id?: string
  fullName: string
  email: string
  date: Date | string
  timeSlot: string
  totalPrice: string
  promoCode: $Enums.PromoCode
  experience: Prisma.experienceCreateNestedOneWithoutBookingInput
}

export type bookingUncheckedCreateInput = {
  id?: string
  fullName: string
  email: string
  experienceId: string
  date: Date | string
  timeSlot: string
  totalPrice: string
  promoCode: $Enums.PromoCode
}

export type bookingUpdateInput = {
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  timeSlot?: Prisma.StringFieldUpdateOperationsInput | string
  totalPrice?: Prisma.StringFieldUpdateOperationsInput | string
  promoCode?: Prisma.EnumPromoCodeFieldUpdateOperationsInput | $Enums.PromoCode
  experience?: Prisma.experienceUpdateOneRequiredWithoutBookingNestedInput
}

export type bookingUncheckedUpdateInput = {
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  timeSlot?: Prisma.StringFieldUpdateOperationsInput | string
  totalPrice?: Prisma.StringFieldUpdateOperationsInput | string
  promoCode?: Prisma.EnumPromoCodeFieldUpdateOperationsInput | $Enums.PromoCode
}

export type bookingCreateManyInput = {
  id?: string
  fullName: string
  email: string
  experienceId: string
  date: Date | string
  timeSlot: string
  totalPrice: string
  promoCode: $Enums.PromoCode
}

export type bookingUpdateManyMutationInput = {
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  timeSlot?: Prisma.StringFieldUpdateOperationsInput | string
  totalPrice?: Prisma.StringFieldUpdateOperationsInput | string
  promoCode?: Prisma.EnumPromoCodeFieldUpdateOperationsInput | $Enums.PromoCode
}

export type bookingUncheckedUpdateManyInput = {
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  timeSlot?: Prisma.StringFieldUpdateOperationsInput | string
  totalPrice?: Prisma.StringFieldUpdateOperationsInput | string
  promoCode?: Prisma.EnumPromoCodeFieldUpdateOperationsInput | $Enums.PromoCode
}

export type bookingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  experienceId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  timeSlot?: Prisma.SortOrder
  totalPrice?: Prisma.SortOrder
  promoCode?: Prisma.SortOrder
}

export type bookingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  experienceId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  timeSlot?: Prisma.SortOrder
  totalPrice?: Prisma.SortOrder
  promoCode?: Prisma.SortOrder
}

export type bookingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  experienceId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  timeSlot?: Prisma.SortOrder
  totalPrice?: Prisma.SortOrder
  promoCode?: Prisma.SortOrder
}

export type BookingListRelationFilter = {
  every?: Prisma.bookingWhereInput
  some?: Prisma.bookingWhereInput
  none?: Prisma.bookingWhereInput
}

export type bookingOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type EnumPromoCodeFieldUpdateOperationsInput = {
  set?: $Enums.PromoCode
}

export type bookingCreateNestedManyWithoutExperienceInput = {
  create?: Prisma.XOR<Prisma.bookingCreateWithoutExperienceInput, Prisma.bookingUncheckedCreateWithoutExperienceInput> | Prisma.bookingCreateWithoutExperienceInput[] | Prisma.bookingUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.bookingCreateOrConnectWithoutExperienceInput | Prisma.bookingCreateOrConnectWithoutExperienceInput[]
  createMany?: Prisma.bookingCreateManyExperienceInputEnvelope
  connect?: Prisma.bookingWhereUniqueInput | Prisma.bookingWhereUniqueInput[]
}

export type bookingUncheckedCreateNestedManyWithoutExperienceInput = {
  create?: Prisma.XOR<Prisma.bookingCreateWithoutExperienceInput, Prisma.bookingUncheckedCreateWithoutExperienceInput> | Prisma.bookingCreateWithoutExperienceInput[] | Prisma.bookingUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.bookingCreateOrConnectWithoutExperienceInput | Prisma.bookingCreateOrConnectWithoutExperienceInput[]
  createMany?: Prisma.bookingCreateManyExperienceInputEnvelope
  connect?: Prisma.bookingWhereUniqueInput | Prisma.bookingWhereUniqueInput[]
}

export type bookingUpdateManyWithoutExperienceNestedInput = {
  create?: Prisma.XOR<Prisma.bookingCreateWithoutExperienceInput, Prisma.bookingUncheckedCreateWithoutExperienceInput> | Prisma.bookingCreateWithoutExperienceInput[] | Prisma.bookingUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.bookingCreateOrConnectWithoutExperienceInput | Prisma.bookingCreateOrConnectWithoutExperienceInput[]
  upsert?: Prisma.bookingUpsertWithWhereUniqueWithoutExperienceInput | Prisma.bookingUpsertWithWhereUniqueWithoutExperienceInput[]
  createMany?: Prisma.bookingCreateManyExperienceInputEnvelope
  set?: Prisma.bookingWhereUniqueInput | Prisma.bookingWhereUniqueInput[]
  disconnect?: Prisma.bookingWhereUniqueInput | Prisma.bookingWhereUniqueInput[]
  delete?: Prisma.bookingWhereUniqueInput | Prisma.bookingWhereUniqueInput[]
  connect?: Prisma.bookingWhereUniqueInput | Prisma.bookingWhereUniqueInput[]
  update?: Prisma.bookingUpdateWithWhereUniqueWithoutExperienceInput | Prisma.bookingUpdateWithWhereUniqueWithoutExperienceInput[]
  updateMany?: Prisma.bookingUpdateManyWithWhereWithoutExperienceInput | Prisma.bookingUpdateManyWithWhereWithoutExperienceInput[]
  deleteMany?: Prisma.bookingScalarWhereInput | Prisma.bookingScalarWhereInput[]
}

export type bookingUncheckedUpdateManyWithoutExperienceNestedInput = {
  create?: Prisma.XOR<Prisma.bookingCreateWithoutExperienceInput, Prisma.bookingUncheckedCreateWithoutExperienceInput> | Prisma.bookingCreateWithoutExperienceInput[] | Prisma.bookingUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.bookingCreateOrConnectWithoutExperienceInput | Prisma.bookingCreateOrConnectWithoutExperienceInput[]
  upsert?: Prisma.bookingUpsertWithWhereUniqueWithoutExperienceInput | Prisma.bookingUpsertWithWhereUniqueWithoutExperienceInput[]
  createMany?: Prisma.bookingCreateManyExperienceInputEnvelope
  set?: Prisma.bookingWhereUniqueInput | Prisma.bookingWhereUniqueInput[]
  disconnect?: Prisma.bookingWhereUniqueInput | Prisma.bookingWhereUniqueInput[]
  delete?: Prisma.bookingWhereUniqueInput | Prisma.bookingWhereUniqueInput[]
  connect?: Prisma.bookingWhereUniqueInput | Prisma.bookingWhereUniqueInput[]
  update?: Prisma.bookingUpdateWithWhereUniqueWithoutExperienceInput | Prisma.bookingUpdateWithWhereUniqueWithoutExperienceInput[]
  updateMany?: Prisma.bookingUpdateManyWithWhereWithoutExperienceInput | Prisma.bookingUpdateManyWithWhereWithoutExperienceInput[]
  deleteMany?: Prisma.bookingScalarWhereInput | Prisma.bookingScalarWhereInput[]
}

export type bookingCreateWithoutExperienceInput = {
  id?: string
  fullName: string
  email: string
  date: Date | string
  timeSlot: string
  totalPrice: string
  promoCode: $Enums.PromoCode
}

export type bookingUncheckedCreateWithoutExperienceInput = {
  id?: string
  fullName: string
  email: string
  date: Date | string
  timeSlot: string
  totalPrice: string
  promoCode: $Enums.PromoCode
}

export type bookingCreateOrConnectWithoutExperienceInput = {
  where: Prisma.bookingWhereUniqueInput
  create: Prisma.XOR<Prisma.bookingCreateWithoutExperienceInput, Prisma.bookingUncheckedCreateWithoutExperienceInput>
}

export type bookingCreateManyExperienceInputEnvelope = {
  data: Prisma.bookingCreateManyExperienceInput | Prisma.bookingCreateManyExperienceInput[]
}

export type bookingUpsertWithWhereUniqueWithoutExperienceInput = {
  where: Prisma.bookingWhereUniqueInput
  update: Prisma.XOR<Prisma.bookingUpdateWithoutExperienceInput, Prisma.bookingUncheckedUpdateWithoutExperienceInput>
  create: Prisma.XOR<Prisma.bookingCreateWithoutExperienceInput, Prisma.bookingUncheckedCreateWithoutExperienceInput>
}

export type bookingUpdateWithWhereUniqueWithoutExperienceInput = {
  where: Prisma.bookingWhereUniqueInput
  data: Prisma.XOR<Prisma.bookingUpdateWithoutExperienceInput, Prisma.bookingUncheckedUpdateWithoutExperienceInput>
}

export type bookingUpdateManyWithWhereWithoutExperienceInput = {
  where: Prisma.bookingScalarWhereInput
  data: Prisma.XOR<Prisma.bookingUpdateManyMutationInput, Prisma.bookingUncheckedUpdateManyWithoutExperienceInput>
}

export type bookingScalarWhereInput = {
  AND?: Prisma.bookingScalarWhereInput | Prisma.bookingScalarWhereInput[]
  OR?: Prisma.bookingScalarWhereInput[]
  NOT?: Prisma.bookingScalarWhereInput | Prisma.bookingScalarWhereInput[]
  id?: Prisma.StringFilter<"booking"> | string
  fullName?: Prisma.StringFilter<"booking"> | string
  email?: Prisma.StringFilter<"booking"> | string
  experienceId?: Prisma.StringFilter<"booking"> | string
  date?: Prisma.DateTimeFilter<"booking"> | Date | string
  timeSlot?: Prisma.StringFilter<"booking"> | string
  totalPrice?: Prisma.StringFilter<"booking"> | string
  promoCode?: Prisma.EnumPromoCodeFilter<"booking"> | $Enums.PromoCode
}

export type bookingCreateManyExperienceInput = {
  id?: string
  fullName: string
  email: string
  date: Date | string
  timeSlot: string
  totalPrice: string
  promoCode: $Enums.PromoCode
}

export type bookingUpdateWithoutExperienceInput = {
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  timeSlot?: Prisma.StringFieldUpdateOperationsInput | string
  totalPrice?: Prisma.StringFieldUpdateOperationsInput | string
  promoCode?: Prisma.EnumPromoCodeFieldUpdateOperationsInput | $Enums.PromoCode
}

export type bookingUncheckedUpdateWithoutExperienceInput = {
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  timeSlot?: Prisma.StringFieldUpdateOperationsInput | string
  totalPrice?: Prisma.StringFieldUpdateOperationsInput | string
  promoCode?: Prisma.EnumPromoCodeFieldUpdateOperationsInput | $Enums.PromoCode
}

export type bookingUncheckedUpdateManyWithoutExperienceInput = {
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  timeSlot?: Prisma.StringFieldUpdateOperationsInput | string
  totalPrice?: Prisma.StringFieldUpdateOperationsInput | string
  promoCode?: Prisma.EnumPromoCodeFieldUpdateOperationsInput | $Enums.PromoCode
}



export type bookingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fullName?: boolean
  email?: boolean
  experienceId?: boolean
  date?: boolean
  timeSlot?: boolean
  totalPrice?: boolean
  promoCode?: boolean
  experience?: boolean | Prisma.experienceDefaultArgs<ExtArgs>
}, ExtArgs["result"]["booking"]>



export type bookingSelectScalar = {
  id?: boolean
  fullName?: boolean
  email?: boolean
  experienceId?: boolean
  date?: boolean
  timeSlot?: boolean
  totalPrice?: boolean
  promoCode?: boolean
}

export type bookingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "fullName" | "email" | "experienceId" | "date" | "timeSlot" | "totalPrice" | "promoCode", ExtArgs["result"]["booking"]>
export type bookingInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  experience?: boolean | Prisma.experienceDefaultArgs<ExtArgs>
}

export type $bookingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "booking"
  objects: {
    experience: Prisma.$experiencePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    fullName: string
    email: string
    experienceId: string
    date: Date
    timeSlot: string
    totalPrice: string
    promoCode: $Enums.PromoCode
  }, ExtArgs["result"]["booking"]>
  composites: {}
}

export type bookingGetPayload<S extends boolean | null | undefined | bookingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$bookingPayload, S>

export type bookingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<bookingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BookingCountAggregateInputType | true
  }

export interface bookingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['booking'], meta: { name: 'booking' } }
  /**
   * Find zero or one Booking that matches the filter.
   * @param {bookingFindUniqueArgs} args - Arguments to find a Booking
   * @example
   * // Get one Booking
   * const booking = await prisma.booking.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends bookingFindUniqueArgs>(args: Prisma.SelectSubset<T, bookingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__bookingClient<runtime.Types.Result.GetResult<Prisma.$bookingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Booking that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {bookingFindUniqueOrThrowArgs} args - Arguments to find a Booking
   * @example
   * // Get one Booking
   * const booking = await prisma.booking.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends bookingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, bookingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__bookingClient<runtime.Types.Result.GetResult<Prisma.$bookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Booking that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bookingFindFirstArgs} args - Arguments to find a Booking
   * @example
   * // Get one Booking
   * const booking = await prisma.booking.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends bookingFindFirstArgs>(args?: Prisma.SelectSubset<T, bookingFindFirstArgs<ExtArgs>>): Prisma.Prisma__bookingClient<runtime.Types.Result.GetResult<Prisma.$bookingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Booking that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bookingFindFirstOrThrowArgs} args - Arguments to find a Booking
   * @example
   * // Get one Booking
   * const booking = await prisma.booking.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends bookingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, bookingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__bookingClient<runtime.Types.Result.GetResult<Prisma.$bookingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Bookings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bookingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Bookings
   * const bookings = await prisma.booking.findMany()
   * 
   * // Get first 10 Bookings
   * const bookings = await prisma.booking.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const bookingWithIdOnly = await prisma.booking.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends bookingFindManyArgs>(args?: Prisma.SelectSubset<T, bookingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$bookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Booking.
   * @param {bookingCreateArgs} args - Arguments to create a Booking.
   * @example
   * // Create one Booking
   * const Booking = await prisma.booking.create({
   *   data: {
   *     // ... data to create a Booking
   *   }
   * })
   * 
   */
  create<T extends bookingCreateArgs>(args: Prisma.SelectSubset<T, bookingCreateArgs<ExtArgs>>): Prisma.Prisma__bookingClient<runtime.Types.Result.GetResult<Prisma.$bookingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Bookings.
   * @param {bookingCreateManyArgs} args - Arguments to create many Bookings.
   * @example
   * // Create many Bookings
   * const booking = await prisma.booking.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends bookingCreateManyArgs>(args?: Prisma.SelectSubset<T, bookingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Booking.
   * @param {bookingDeleteArgs} args - Arguments to delete one Booking.
   * @example
   * // Delete one Booking
   * const Booking = await prisma.booking.delete({
   *   where: {
   *     // ... filter to delete one Booking
   *   }
   * })
   * 
   */
  delete<T extends bookingDeleteArgs>(args: Prisma.SelectSubset<T, bookingDeleteArgs<ExtArgs>>): Prisma.Prisma__bookingClient<runtime.Types.Result.GetResult<Prisma.$bookingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Booking.
   * @param {bookingUpdateArgs} args - Arguments to update one Booking.
   * @example
   * // Update one Booking
   * const booking = await prisma.booking.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends bookingUpdateArgs>(args: Prisma.SelectSubset<T, bookingUpdateArgs<ExtArgs>>): Prisma.Prisma__bookingClient<runtime.Types.Result.GetResult<Prisma.$bookingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Bookings.
   * @param {bookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
   * @example
   * // Delete a few Bookings
   * const { count } = await prisma.booking.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends bookingDeleteManyArgs>(args?: Prisma.SelectSubset<T, bookingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Bookings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bookingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Bookings
   * const booking = await prisma.booking.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends bookingUpdateManyArgs>(args: Prisma.SelectSubset<T, bookingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Booking.
   * @param {bookingUpsertArgs} args - Arguments to update or create a Booking.
   * @example
   * // Update or create a Booking
   * const booking = await prisma.booking.upsert({
   *   create: {
   *     // ... data to create a Booking
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Booking we want to update
   *   }
   * })
   */
  upsert<T extends bookingUpsertArgs>(args: Prisma.SelectSubset<T, bookingUpsertArgs<ExtArgs>>): Prisma.Prisma__bookingClient<runtime.Types.Result.GetResult<Prisma.$bookingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Bookings that matches the filter.
   * @param {bookingFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const booking = await prisma.booking.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.bookingFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Booking.
   * @param {bookingAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const booking = await prisma.booking.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.bookingAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Bookings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bookingCountArgs} args - Arguments to filter Bookings to count.
   * @example
   * // Count the number of Bookings
   * const count = await prisma.booking.count({
   *   where: {
   *     // ... the filter for the Bookings we want to count
   *   }
   * })
  **/
  count<T extends bookingCountArgs>(
    args?: Prisma.Subset<T, bookingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BookingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Booking.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BookingAggregateArgs>(args: Prisma.Subset<T, BookingAggregateArgs>): Prisma.PrismaPromise<GetBookingAggregateType<T>>

  /**
   * Group by Booking.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bookingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends bookingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: bookingGroupByArgs['orderBy'] }
      : { orderBy?: bookingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, bookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the booking model
 */
readonly fields: bookingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for booking.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__bookingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  experience<T extends Prisma.experienceDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.experienceDefaultArgs<ExtArgs>>): Prisma.Prisma__experienceClient<runtime.Types.Result.GetResult<Prisma.$experiencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the booking model
 */
export interface bookingFieldRefs {
  readonly id: Prisma.FieldRef<"booking", 'String'>
  readonly fullName: Prisma.FieldRef<"booking", 'String'>
  readonly email: Prisma.FieldRef<"booking", 'String'>
  readonly experienceId: Prisma.FieldRef<"booking", 'String'>
  readonly date: Prisma.FieldRef<"booking", 'DateTime'>
  readonly timeSlot: Prisma.FieldRef<"booking", 'String'>
  readonly totalPrice: Prisma.FieldRef<"booking", 'String'>
  readonly promoCode: Prisma.FieldRef<"booking", 'PromoCode'>
}
    

// Custom InputTypes
/**
 * booking findUnique
 */
export type bookingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the booking
   */
  select?: Prisma.bookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the booking
   */
  omit?: Prisma.bookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookingInclude<ExtArgs> | null
  /**
   * Filter, which booking to fetch.
   */
  where: Prisma.bookingWhereUniqueInput
}

/**
 * booking findUniqueOrThrow
 */
export type bookingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the booking
   */
  select?: Prisma.bookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the booking
   */
  omit?: Prisma.bookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookingInclude<ExtArgs> | null
  /**
   * Filter, which booking to fetch.
   */
  where: Prisma.bookingWhereUniqueInput
}

/**
 * booking findFirst
 */
export type bookingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the booking
   */
  select?: Prisma.bookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the booking
   */
  omit?: Prisma.bookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookingInclude<ExtArgs> | null
  /**
   * Filter, which booking to fetch.
   */
  where?: Prisma.bookingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of bookings to fetch.
   */
  orderBy?: Prisma.bookingOrderByWithRelationInput | Prisma.bookingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for bookings.
   */
  cursor?: Prisma.bookingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` bookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` bookings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of bookings.
   */
  distinct?: Prisma.BookingScalarFieldEnum | Prisma.BookingScalarFieldEnum[]
}

/**
 * booking findFirstOrThrow
 */
export type bookingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the booking
   */
  select?: Prisma.bookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the booking
   */
  omit?: Prisma.bookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookingInclude<ExtArgs> | null
  /**
   * Filter, which booking to fetch.
   */
  where?: Prisma.bookingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of bookings to fetch.
   */
  orderBy?: Prisma.bookingOrderByWithRelationInput | Prisma.bookingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for bookings.
   */
  cursor?: Prisma.bookingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` bookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` bookings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of bookings.
   */
  distinct?: Prisma.BookingScalarFieldEnum | Prisma.BookingScalarFieldEnum[]
}

/**
 * booking findMany
 */
export type bookingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the booking
   */
  select?: Prisma.bookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the booking
   */
  omit?: Prisma.bookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookingInclude<ExtArgs> | null
  /**
   * Filter, which bookings to fetch.
   */
  where?: Prisma.bookingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of bookings to fetch.
   */
  orderBy?: Prisma.bookingOrderByWithRelationInput | Prisma.bookingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing bookings.
   */
  cursor?: Prisma.bookingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` bookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` bookings.
   */
  skip?: number
  distinct?: Prisma.BookingScalarFieldEnum | Prisma.BookingScalarFieldEnum[]
}

/**
 * booking create
 */
export type bookingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the booking
   */
  select?: Prisma.bookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the booking
   */
  omit?: Prisma.bookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookingInclude<ExtArgs> | null
  /**
   * The data needed to create a booking.
   */
  data: Prisma.XOR<Prisma.bookingCreateInput, Prisma.bookingUncheckedCreateInput>
}

/**
 * booking createMany
 */
export type bookingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many bookings.
   */
  data: Prisma.bookingCreateManyInput | Prisma.bookingCreateManyInput[]
}

/**
 * booking update
 */
export type bookingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the booking
   */
  select?: Prisma.bookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the booking
   */
  omit?: Prisma.bookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookingInclude<ExtArgs> | null
  /**
   * The data needed to update a booking.
   */
  data: Prisma.XOR<Prisma.bookingUpdateInput, Prisma.bookingUncheckedUpdateInput>
  /**
   * Choose, which booking to update.
   */
  where: Prisma.bookingWhereUniqueInput
}

/**
 * booking updateMany
 */
export type bookingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update bookings.
   */
  data: Prisma.XOR<Prisma.bookingUpdateManyMutationInput, Prisma.bookingUncheckedUpdateManyInput>
  /**
   * Filter which bookings to update
   */
  where?: Prisma.bookingWhereInput
  /**
   * Limit how many bookings to update.
   */
  limit?: number
}

/**
 * booking upsert
 */
export type bookingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the booking
   */
  select?: Prisma.bookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the booking
   */
  omit?: Prisma.bookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookingInclude<ExtArgs> | null
  /**
   * The filter to search for the booking to update in case it exists.
   */
  where: Prisma.bookingWhereUniqueInput
  /**
   * In case the booking found by the `where` argument doesn't exist, create a new booking with this data.
   */
  create: Prisma.XOR<Prisma.bookingCreateInput, Prisma.bookingUncheckedCreateInput>
  /**
   * In case the booking was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.bookingUpdateInput, Prisma.bookingUncheckedUpdateInput>
}

/**
 * booking delete
 */
export type bookingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the booking
   */
  select?: Prisma.bookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the booking
   */
  omit?: Prisma.bookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookingInclude<ExtArgs> | null
  /**
   * Filter which booking to delete.
   */
  where: Prisma.bookingWhereUniqueInput
}

/**
 * booking deleteMany
 */
export type bookingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which bookings to delete
   */
  where?: Prisma.bookingWhereInput
  /**
   * Limit how many bookings to delete.
   */
  limit?: number
}

/**
 * booking findRaw
 */
export type bookingFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * booking aggregateRaw
 */
export type bookingAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * booking without action
 */
export type bookingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the booking
   */
  select?: Prisma.bookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the booking
   */
  omit?: Prisma.bookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookingInclude<ExtArgs> | null
}
